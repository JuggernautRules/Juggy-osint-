#!/data/data/com.termux/files/usr/bin/python3
# OSINT Tool –¥–ª—è Termux
# –ê–≤—Ç–æ—Ä: @The_juggy
# –í–µ—Ä—Å–∏—è: 6.1

import requests
from colorama import init, Fore, Style
import time
import os
import sys
import platform
from concurrent.futures import ThreadPoolExecutor
import phonenumbers
from phonenumbers import carrier, geocoder, timezone
from bs4 import BeautifulSoup
import json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init(autoreset=True)
IS_MOBILE = 'android' in platform.system().lower()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
CONFIG = {
    "HIBP_API_KEY": "",  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://haveibeenpwned.com/API/Key
    "SHODAN_API_KEY": "",  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://account.shodan.io/
    "VIRUSTOTAL_API_KEY": ""  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://www.virustotal.com/
}

JUGGY_LOGO = f"""{Fore.RED}
   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù
   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù 
‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïî‚ïù  
‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   
 ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   
{Fore.RESET}""" if not IS_MOBILE else f"{Fore.RED}JUGGY OSINT v6.1 | @The_juggy{Fore.RESET}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36'
}
TIMEOUT = 15
MAX_THREADS = 3  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def show_banner():
    clear_screen()
    print(JUGGY_LOGO)
    print(f"{Fore.YELLOW}OSINT Tool –¥–ª—è Termux | –ê–≤—Ç–æ—Ä: @The_juggy{Fore.RESET}\n")

def show_menu():
    show_banner()
    print(f"{Fore.CYAN}‚ïî{'‚ïê'*35}‚ïó")
    print(f"‚ïë {Fore.YELLOW}üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ {Fore.CYAN}{' '*17}‚ïë")
    print(f"‚ï†{'‚ïê'*35}‚ï£")
    print(f"‚ïë {Fore.GREEN}1.{Fore.CYAN} –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞  ‚ïë")
    print(f"‚ïë {Fore.GREEN}2.{Fore.CYAN} –ü–æ–∏—Å–∫ –ø–æ email           ‚ïë")
    print(f"‚ïë {Fore.GREEN}3.{Fore.CYAN} –ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É        ‚ïë")
    print(f"‚ïë {Fore.GREEN}4.{Fore.CYAN} –ü–æ–∏—Å–∫ –≤ Telegram         ‚ïë")
    print(f"‚ïë {Fore.GREEN}5.{Fore.CYAN} –ü—Ä–æ–≤–µ—Ä–∫–∞ IP/–¥–æ–º–µ–Ω–∞       ‚ïë")
    print(f"‚ïë {Fore.GREEN}6.{Fore.CYAN} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API            ‚ïë")
    print(f"‚ïë {Fore.GREEN}7.{Fore.CYAN} –í—ã—Ö–æ–¥                    ‚ïë")
    print(f"‚ïö{'‚ïê'*35}‚ïù{Fore.RESET}")
    
    while True:
        choice = input(f"\n{Fore.YELLOW}‚û§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): {Fore.RESET}")
        if choice in ['1', '2', '3', '4', '5', '6', '7']:
            return choice
        print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!{Fore.RESET}")

def safe_request(url, method='GET', headers=None, params=None):
    try:
        response = requests.request(
            method,
            url,
            headers=headers or HEADERS,
            params=params,
            timeout=TIMEOUT,
            allow_redirects=False
        )
        return response
    except Exception as e:
        print(f"{Fore.YELLOW}[!] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}{Fore.RESET}")
        return None

def check_site(site, url, identifier):
    response = safe_request(url.format(identifier))
    if response:
        if response.status_code == 200:
            return (True, site, url.format(identifier))
        return (False, site, None)
    return (None, site, "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

def phone_lookup(phone):
    try:
        parsed = phonenumbers.parse("+" + phone, None)
        return {
            "operator": carrier.name_for_number(parsed, "ru") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "region": geocoder.description_for_number(parsed, "ru") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "timezone": ', '.join(timezone.time_zones_for_number(parsed)) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
    except Exception as e:
        return {"error": str(e)}

def check_hibp(email):
    if not CONFIG["HIBP_API_KEY"]:
        return {"error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (HIBP)"}
    
    response = safe_request(
        f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}",
        headers={'hibp-api-key': CONFIG["HIBP_API_KEY"]}
    )
    
    if response:
        if response.status_code == 200:
            return {"breaches": response.json()}
        elif response.status_code == 404:
            return {"status": "–£—Ç–µ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
        return {"error": f"HTTP {response.status_code}"}
    return {"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"}

def check_shodan(ip):
    if not CONFIG["SHODAN_API_KEY"]:
        return {"error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (Shodan)"}
    
    response = safe_request(
        f"https://api.shodan.io/shodan/host/{ip}",
        params={'key': CONFIG["SHODAN_API_KEY"]}
    )
    
    if response:
        if response.status_code == 200:
            return response.json()
        return {"error": f"HTTP {response.status_code}"}
    return {"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"}

def check_virustotal(domain):
    if not CONFIG["VIRUSTOTAL_API_KEY"]:
        return {"error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (VirusTotal)"}
    
    response = safe_request(
        f"https://www.virustotal.com/api/v3/domains/{domain}",
        headers={'x-apikey': CONFIG["VIRUSTOTAL_API_KEY"]}
    )
    
    if response:
        if response.status_code == 200:
            return response.json()
        return {"error": f"HTTP {response.status_code}"}
    return {"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"}

def phone_search():
    show_banner()
    print(f"{Fore.CYAN}‚ïî{'‚ïê'*50}‚ïó")
    print(f"‚ïë {Fore.YELLOW}üîç –ü–û–ò–°–ö –ü–û –ù–û–ú–ï–†–£ –¢–ï–õ–ï–§–û–ù–ê {Fore.CYAN}{' '*21}‚ïë")
    print(f"‚ïö{'‚ïê'*50}‚ïù{Fore.RESET}")
    
    phone = input(f"{Fore.GREEN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (7XXXXXXXXXX): {Fore.RESET}").strip()
    if not phone.isdigit() or len(phone) != 11:
        print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: 79123456789{Fore.RESET}")
        time.sleep(1)
        return

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\n{Fore.MAGENTA}‚åõÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä...{Fore.RESET}")
    phone_info = phone_lookup(phone)
    
    if "error" in phone_info:
        print(f"{Fore.RED}‚ö†Ô∏è –û—à–∏–±–∫–∞: {phone_info['error']}{Fore.RESET}")
    else:
        print(f"\n{Fore.YELLOW}üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:{Fore.RESET}")
        print(f"{Fore.GREEN}‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: {phone_info['operator']}")
        print(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {phone_info['region']}")
        print(f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {phone_info['timezone']}{Fore.RESET}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
    print(f"\n{Fore.YELLOW}üåê –ü–æ–∏—Å–∫ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:{Fore.RESET}")
    
    services = {
        "WhatsApp": "https://wa.me/{}",
        "Telegram": "https://t.me/+{}",
        "VK": "https://vk.com/phone/{}",
        "Avito": "https://www.avito.ru/user/{}"
    }

    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        results = list(executor.map(
            lambda item: check_site(item[0], item[1], phone),
            services.items()
        ))
    
    for result in results:
        status, site, data = result
        if status is True:
            print(f"{Fore.GREEN}[+] {site}: {data}{Fore.RESET}")
        elif status is False:
            print(f"{Fore.RED}[-] {site}: –ù–µ –Ω–∞–π–¥–µ–Ω–æ{Fore.RESET}")
        else:
            print(f"{Fore.YELLOW}[!] {site}: {data}{Fore.RESET}")

    input(f"\n{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Fore.RESET}")

def email_search():
    show_banner()
    print(f"{Fore.CYAN}‚ïî{'‚ïê'*40}‚ïó")
    print(f"‚ïë {Fore.YELLOW}üìß –ü–û–ò–°–ö –ü–û EMAIL {Fore.CYAN}{' '*20}‚ïë")
    print(f"‚ïö{'‚ïê'*40}‚ïù{Fore.RESET}")
    
    email = input(f"{Fore.GREEN}–í–≤–µ–¥–∏—Ç–µ email: {Fore.RESET}").strip()
    if "@" not in email:
        print(f"{Fore.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: test@example.com{Fore.RESET}")
        time.sleep(1)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫
    print(f"\n{Fore.MAGENTA}‚åõÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç–µ—á–∫–∏...{Fore.RESET}")
    hibp_result = check_hibp(email)
    
    if "error" in hibp_result:
        print(f"{Fore.YELLOW}‚ö†Ô∏è HIBP: {hibp_result['error']}{Fore.RESET}")
    elif "breaches" in hibp_result:
        print(f"{Fore.RED}[!] –ù–∞–π–¥–µ–Ω–æ —É—Ç–µ—á–µ–∫: {len(hibp_result['breaches'])}{Fore.RESET}")
        for breach in hibp_result['breaches'][:3]:
            print(f"- {breach['Name']} ({breach['BreachDate']})")
    else:
        print(f"{Fore.GREEN}[+] –£—Ç–µ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ{Fore.RESET}")

    # –ü–æ–∏—Å–∫ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
    print(f"\n{Fore.YELLOW}üîé –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:{Fore.RESET}")
    
    sites = {
        "GitHub": "https://github.com/{}",
        "Twitter": "https://twitter.com/{}",
        "Instagram": "https://instagram.com/{}",
        "VK": "https://vk.com/{}"
    }
    username = email.split('@')[0]

    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        results = list(executor.map(
            lambda item: check_site(item[0], item[1], username),
            sites.items()
        ))
    
    for result in results:
        status, site, data = result
        if status is True:
            print(f"{Fore.GREEN}[+] {site}: {data}{Fore.RESET}")
        elif status is False:
            print(f"{Fore.RED}[-] {site}: –ù–µ –Ω–∞–π–¥–µ–Ω–æ{Fore.RESET}")
        else:
            print(f"{Fore.YELLOW}[!] {site}: {data}{Fore.RESET}")

    input(f"\n{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Fore.RESET}")

def username_search():
    show_banner()
    print(f"{Fore.CYAN}‚ïî{'‚ïê'*40}‚ïó")
    print(f"‚ïë {Fore.YELLOW}üë§ –ü–û–ò–°–ö –ü–û –ù–ò–ö–ù–ï–ô–ú–£ {Fore.CYAN}{' '*16}‚ïë")
    print(f"‚ïö{'‚ïê'*40}‚ïù{Fore.RESET}")
    
    username = input(f"{Fore.GREEN}–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º: {Fore.RESET}").strip()
    if not username:
        print(f"{Fore.RED}‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!{Fore.RESET}")
        time.sleep(1)
        return

    print(f"\n{Fore.MAGENTA}‚åõÔ∏è –°–∫–∞–Ω–∏—Ä—É–µ–º 30+ —Å–∞–π—Ç–æ–≤ –¥–ª—è: @{username}{Fore.RESET}")
    
    sites = {
        "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ": "https://vk.com/{}",
        "Telegram": "https://t.me/{}",
        "GitHub": "https://github.com/{}",
        "Steam": "https://steamcommunity.com/id/{}",
        "Twitter": "https://twitter.com/{}",
        "Instagram": "https://instagram.com/{}",
        "Pinterest": "https://pinterest.com/{}",
        "Reddit": "https://reddit.com/user/{}"
    }

    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        results = list(executor.map(
            lambda item: check_site(item[0], item[1], username),
            sites.items()
        ))
    
    found = False
    for result in results:
        status, site, data = result
        if status is True:
            print(f"{Fore.GREEN}[+] {site}: {data}{Fore.RESET}")
            found = True
        elif status is None:
            print(f"{Fore.YELLOW}[!] {site}: {data}{Fore.RESET}")
    
    if not found:
        print(f"{Fore.RED}[-] –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã{Fore.RESET}")

    input(f"\n{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Fore.RESET}")

def telegram_search():
    show_banner()
    print(f"{Fore.CYAN}‚ïî{'‚ïê'*50}‚ïó")
    print(f"‚ïë {Fore.YELLOW}‚úàÔ∏è –£–ì–õ–£–ë–õ–ï–ù–ù–´–ô –ü–û–ò–°–ö –í TELEGRAM {Fore.CYAN}{' '*14}‚ïë")
    print(f"‚ïö{'‚ïê'*50}‚ïù{Fore.RESET}")
    
    username = input(f"{Fore.GREEN}–í–≤–µ–¥–∏—Ç–µ Telegram username (–±–µ–∑ @): {Fore.RESET}").strip()
    if not username:
        print(f"{Fore.RED}‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!{Fore.RESET}")
        time.sleep(1)
        return

    print(f"\n{Fore.MAGENTA}‚åõÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å @{username}...{Fore.RESET}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    tg_url = f"https://t.me/{username}"
    response = safe_request(tg_url)
    
    if response and response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        title = soup.find('div', class_='tgme_page_title')
        description = soup.find('div', class_='tgme_page_description')
        
        print(f"\n{Fore.GREEN}[+] –ü—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {tg_url}{Fore.RESET}")
        print(f"\n{Fore.YELLOW}üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:{Fore.RESET}")
        print(f"{Fore.CYAN}‚Ä¢ –ò–º—è: {title.text.strip() if title else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
        print(f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description.text.strip() if description else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}{Fore.RESET}")
    else:
        print(f"\n{Fore.RED}[-] –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π{Fore.RESET}")

    input(f"\n{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Fore.RESET}")

def ip_search():
    show_banner()
    print(f"{Fore.CYAN}‚ïî{'‚ïê'*50}‚ïó")
    print(f"‚ïë {Fore.YELLOW}üåê –ü–†–û–í–ï–†–ö–ê IP/–î–û–ú–ï–ù–ê {Fore.CYAN}{' '*23}‚ïë")
    print(f"‚ïö{'‚ïê'*50}‚ïù{Fore.RESET}")
    
    target = input(f"{Fore.GREEN}–í–≤–µ–¥–∏—Ç–µ IP –∏–ª–∏ –¥–æ–º–µ–Ω: {Fore.RESET}").strip()
    if not target:
        print(f"{Fore.RED}‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥!{Fore.RESET}")
        time.sleep(1)
        return

    # Shodan
    print(f"\n{Fore.MAGENTA}‚åõÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Shodan...{Fore.RESET}")
    shodan_data = check_shodan(target)
    
    if "error" in shodan_data:
        print(f"{Fore.RED}‚ùå Shodan: {shodan_data['error']}{Fore.RESET}")
    else:
        print(f"\n{Fore.YELLOW}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Shodan:{Fore.RESET}")
        print(f"{Fore.GREEN}‚Ä¢ IP: {shodan_data.get('ip_str', 'N/A')}")
        print(f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {shodan_data.get('country_name', 'N/A')}")
        print(f"‚Ä¢ –ì–æ—Ä–æ–¥: {shodan_data.get('city', 'N/A')}")
        print(f"‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {shodan_data.get('isp', 'N/A')}")
        print(f"‚Ä¢ –ü–æ—Ä—Çs: {', '.join(map(str, shodan_data.get('ports', [])))}")
        
        if 'vulns' in shodan_data:
            print(f"\n{Fore.RED}‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç–∏:{Fore.RESET}")
            for vuln in list(shodan_data['vulns'].keys())[:3]:
                print(f"- {vuln}")

    # VirusTotal
    if "." in target:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
        print(f"\n{Fore.MAGENTA}‚åõÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ VirusTotal...{Fore.RESET}")
        vt_data = check_virustotal(target)
        
        if "error" in vt_data:
            print(f"{Fore.YELLOW}‚ö†Ô∏è VirusTotal: {vt_data['error']}{Fore.RESET}")
        else:
            print(f"\n{Fore.YELLOW}üõ°Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã VirusTotal:{Fore.RESET}")
            stats = vt_data.get('data', {}).get('attributes', {}).get('last_analysis_stats', {})
            print(f"{Fore.GREEN}‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–µ–Ω: {stats.get('harmless', 0)}")
            print(f"‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {stats.get('suspicious', 0)}")
            print(f"‚Ä¢ –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π: {stats.get('malicious', 0)}{Fore.RESET}")

    input(f"\n{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Fore.RESET}")

def api_settings():
    show_banner()
    print(f"{Fore.CYAN}‚ïî{'‚ïê'*35}‚ïó")
    print(f"‚ïë {Fore.YELLOW}‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò API {Fore.CYAN}{' '*17}‚ïë")
    print(f"‚ï†{'‚ïê'*35}‚ï£")
    
    print(f"‚ïë {Fore.GREEN}1.{Fore.CYAN} Have I Been Pwned: {'‚úÖ' if CONFIG['HIBP_API_KEY'] else '‚ùå'} ‚ïë")
    print(f"‚ïë {Fore.GREEN}2.{Fore.CYAN} Shodan: {'‚úÖ' if CONFIG['SHODAN_API_KEY'] else '‚ùå'}           ‚ïë")
    print(f"‚ïë {Fore.GREEN}3.{Fore.CYAN} VirusTotal: {'‚úÖ' if CONFIG['VIRUSTOTAL_API_KEY'] else '‚ùå'}      ‚ïë")
    print(f"‚ïë {Fore.GREEN}4.{Fore.CYAN} –ù–∞–∑–∞–¥                     ‚ïë")
    print(f"‚ïö{'‚ïê'*35}‚ïù{Fore.RESET}")
    
    choice = input(f"\n{Fore.YELLOW}‚û§ –í—ã–±–µ—Ä–∏—Ç–µ API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (1-4): {Fore.RESET}")
    
    if choice == '1':
        CONFIG['HIBP_API_KEY'] = input("–í–≤–µ–¥–∏—Ç–µ HIBP API –∫–ª—é—á: ").strip()
    elif choice == '2':
        CONFIG['SHODAN_API_KEY'] = input("–í–≤–µ–¥–∏—Ç–µ Shodan API –∫–ª—é—á: ").strip()
    elif choice == '3':
        CONFIG['VIRUSTOTAL_API_KEY'] = input("–í–≤–µ–¥–∏—Ç–µ VirusTotal API –∫–ª—é—á: ").strip()

def main():
    try:
        if IS_MOBILE:
            os.system("termux-wake-lock")
        
        while True:
            choice = show_menu()
            
            if choice == '1':
                phone_search()
            elif choice == '2':
                email_search()
            elif choice == '3':
                username_search()
            elif choice == '4':
                telegram_search()
            elif choice == '5':
                ip_search()
            elif choice == '6':
                api_settings()
            elif choice == '7':
                print(f"\n{Fore.GREEN}üö™ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...{Fore.RESET}")
                break

    except KeyboardInterrupt:
        print(f"\n{Fore.RED}üö® –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞{Fore.RESET}")
    except Exception as e:
        print(f"\n{Fore.RED}üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Fore.RESET}")
    finally:
        if IS_MOBILE:
            os.system("termux-wake-unlock")
        sys.exit(0)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import requests
        import phonenumbers
        from bs4 import BeautifulSoup
    except ImportError:
        print(f"{Fore.RED}‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:{Fore.RESET}")
        print("pip install requests phonenumbers beautifulsoup4 colorama")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    if not any(CONFIG.values()):
        print(f"{Fore.YELLOW}‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏{Fore.RESET}")
    
    main()
